package com.iua.soa.business;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import com.iua.soa.business.exception.BadStateException;
import com.iua.soa.business.exception.BusinessException;
import com.iua.soa.business.exception.NotFoundException;
import com.iua.soa.business.exception.UserNotMatchException;
import com.iua.soa.model.Cliente;
import com.iua.soa.model.Factura;
import com.iua.soa.model.Transaccion;
import com.iua.soa.model.persistence.ClienteRepository;
import com.iua.soa.model.persistence.FacturaRepository;
import com.iua.soa.model.persistence.TransaccionRepository;

@Service
public class TransaccionBusiness implements ITransaccionBusiness{

	@Autowired TransaccionRepository transaccionDAO;
	@Autowired FacturaRepository	 facturaDAO;
	@Autowired ClienteRepository	 clienteDAO;
	
	@Override
	public List<Transaccion> list() throws BusinessException {
		
		List<Transaccion> transacciones;
		
		try {
			transacciones = transaccionDAO.findAll();
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		
		return transacciones;
	}

	@Override
	public Transaccion pagar(Factura f) throws BusinessException, NotFoundException {
		
		Optional<Cliente> opCliente = clienteDAO.findById(f.getCliente().getId());
		boolean isFacturaAsociated = false;
		
		
		
		if(!opCliente.isPresent()) {
			throw new NotFoundException("No se encuentra el cliente con id: "+f.getCliente().getId());
		}
		
		Optional<Factura> opFactura = facturaDAO.findById(f.getId());
		
		if(!opFactura.isPresent()) {
			throw new NotFoundException("No se encuentra la factura con id: "+f.getId()+" asociada al usuario con id: "+f.getCliente().getId());
		}
		
		if(opFactura.get().getEstado().equals(Factura.Estado.ANULADA)||opFactura.get().getEstado().equals(Factura.Estado.PAGADA)) {
			throw new BadStateException("La factura con id: "+opFactura.get().getId()+" se encuentra pagada o anulada!");
		}
		
		
		Optional<Transaccion> opTransaccion = transaccionDAO.findById(null);
		
		if(!opTransaccion.isPresent()) {
			Transaccion tra= new Transaccion();
		
			tra.setCliente(opCliente.get());
			tra.setFactura(f);
			
			Date date = new Date();
			
			tra.setFecha(date);
			
			try {
				Transaccion t = transaccionDAO.save(tra);
				f.setEstado(Factura.Estado.PAGADA);
				facturaDAO.save(f);
				return tra;
			}catch (Exception e) {
				throw new BusinessException(e.getMessage());
			}	
			
			
		}else {
			try {
				f.setEstado(Factura.Estado.PAGADA);
				facturaDAO.save(f);
				return opTransaccion.get();
			}catch (Exception e) {
				throw new BusinessException(e.getMessage());
			}
		}
		
		
		
	}

	@Override
	public Transaccion load(Long id) throws NotFoundException, BusinessException {
		Optional<Transaccion> op;
		
		try {
			op = transaccionDAO.findById(id);
		} catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
		
		if(!op.isPresent()) {
			throw new NotFoundException("No se encontro la transaccion con el id: "+id);
		}
		
		return op.get();
	}

	@Override
	public void delete(Long id) throws NotFoundException, BusinessException {
		
		try {
			transaccionDAO.deleteById(id);
		} catch (EmptyResultDataAccessException e) {
			throw new NotFoundException("No se encontro la transaccion con el id: "+id);
		}catch (Exception e) {
			throw new BusinessException(e.getMessage());
		}
			
	}

	@Override
	public List<Transaccion> pagar(List<Factura> facturaList) throws NotFoundException, BusinessException,UserNotMatchException,BadStateException {
		
		Optional<Cliente> op =clienteDAO.findById(facturaList.get(0).getCliente().getId()); 
		
		if(!op.isPresent()) {
			throw new NotFoundException(" No se encuentra el usaurio con el id: "+facturaList.get(0).getCliente().getId());
		}
		// Obtenemos el Usaurio y comprobamos que se encuentre en la base de datos
		
		Cliente aux = op.get();
		
		// Comprobamos si las facturas que recibimos son del mismo usuario
		
		for(int i = 0;i< facturaList.size();i++) {
			if(aux.equals(facturaList.get(i).getCliente())) {
				
				// Verificamos que las facturas se encuentren asociadas al usaurio y si su estado es el correcto
				
				Optional<Factura> opF= facturaDAO.findById(facturaList.get(i).getId());
				
				if(!opF.isPresent()) {
					throw new NotFoundException("No se encuentra la factura con id: "+opF.get().getId());
				}
				
				if(!(opF.get().getCliente().equals(aux))) {
					throw new UserNotMatchException("Las facturas que quiere pagar no corresponden al usuario");
				}else{
					if(opF.get().getEstado().equals(Factura.Estado.ANULADA)||opF.get().getEstado().equals(Factura.Estado.PAGADA)) {
						throw new BadStateException("La factura con id: "+opF.get().getId()+" se encuentra pagada o anulada!");
					}
				}
			}else {
				throw new UserNotMatchException("Las facturas que desea pagar no corresponden con el mismo usuario");
			}
		}
		
		// Si pasaron todos los filtros ahora podemos guardarlas como una transaccion exitosa
		
		List<Transaccion> transaccions = new ArrayList<Transaccion>();
		
		for(int i = 0;i< facturaList.size();i++) {
			
			// Creamos una transaccion nueva y la llenamos con los datos
			Transaccion t =new Transaccion();
			
			Factura f = facturaDAO.findById(facturaList.get(i).getFactura().getId()).get();
			
			t.setFactura(f);
			t.setCliente(aux);
			t.setFecha(new Date());
			
			// Almacenamos la transaccion y actualizamos el estado de la factura a PAGADO
			try {
				transaccions.add(transaccionDAO.save(t));
				f.setEstado(Factura.Estado.PAGADA);
				facturaDAO.save(f);
			} catch (Exception e) {
				throw new BusinessException(e.getMessage());
			}
			
		}
		
		return transaccions;
	}
	

}
